// <auto-generated />
using System;
using Blog.Data.SqlServer.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Blog.Data.SqlServer.Migrations
{
    [DbContext(typeof(BlogContext))]
    [Migration("20240723141219_First")]
    partial class First
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Blog.Data.SqlServer.Model.BlogPostModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("varchar(max)")
                        .HasColumnName("Content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedAt");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasColumnName("Username");

                    b.HasKey("Id");

                    b.ToTable("Posts", (string)null);

                    b.HasAnnotation("SqlAfterTableCreated", "EXEC sp_tableoption 'Posts', 'large value types out of row', 1");
                });

            modelBuilder.Entity("Blog.Data.SqlServer.Model.CommentModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("Id");

                    b.Property<Guid>("BlogPostId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("PostId");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("varchar(400)")
                        .HasColumnName("Content");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("CreatedAt");

                    b.HasKey("Id");

                    b.HasIndex("BlogPostId")
                        .HasDatabaseName("IDX_Comments_BlogPostId");

                    SqlServerIndexBuilderExtensions.IncludeProperties(b.HasIndex("BlogPostId"), new[] { "Content", "CreatedAt" });

                    b.ToTable("Comments", (string)null);
                });

            modelBuilder.Entity("Blog.Data.SqlServer.Model.CommentModel", b =>
                {
                    b.HasOne("Blog.Data.SqlServer.Model.BlogPostModel", "BlogPost")
                        .WithMany("Comments")
                        .HasForeignKey("BlogPostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BlogPost");
                });

            modelBuilder.Entity("Blog.Data.SqlServer.Model.BlogPostModel", b =>
                {
                    b.Navigation("Comments");
                });
#pragma warning restore 612, 618
        }
    }
}
